nav#nav-sequence
{
    // Default

    display: none;
    width: 100%;

    &.sequenced
    {
        display: block;
    }

    span.text-label
    {
        display: none;
        color: @black_50;
        font-family: @title_face;
        font-size: 1.063em; // 17px
        letter-spacing: 0.188em;
        text-decoration: none;
        text-transform: uppercase;

        &:hover
        {
            color: @black_50;
        }
    }

    a.prev,
    a.next
    {
        .transition(all 200ms @ease_in_sine);

        color: @black_75;
        text-decoration: none;
        // position: fixed;
            // top: 0;

        svg
        {
            display: block;
            fill: none;
            stroke: currentColor;
            width: 1.313em; // 21px
        }

        &:hover
        {
        	color: @black_24;
        }
    }

    a.prev
    {
        left: 0;

        svg
        {
            float: left;
        }

        span.text-label
        {
            float: left;
        }
    }

    a.next
    {
        right: 0;

        svg
        {
            float: right;
        }

        span.text-label
        {
            float: right;
        }
    }

    a.close
    {
        .animation(spinOnceBack 300ms ease-out);

        display: none;
        height: 80px;
        text-decoration: none;
        margin-top: -110px;
        position: fixed;
            top: 50%;
            right: @spacing_unit_root;
        opacity: .5;
        width: 80px;

        svg
        {
            display: block;
            fill: #bfbfbf;
            height: 80px;
            margin: 0 auto;
            width: 32px;
        }

        &:hover
        {
            .animation(spinOnce 300ms ease-out);

            svg
            {
                fill: @black_24;
                right: 25px;
            }
        }
    }

    // Transitions tied to classes (order matters here).

    &.compact-add
    {
        .transition-duration(@time_compact_animation);

        // Default pre-animation state.
        a.prev,
        a.next
        {
            // This is super important in the case of this element, I think
            // because a transition is applied to these links for the
            // non-compact state. It might be good practice to set transtions
            // to none for pre-animation classes like this one.
            .transition(none);

            opacity: 0;
        }
    }

    &.compact
    {
        @factor: .3;

        .height(@factor);

        a.prev,
        a.next
        {
            .transition(opacity 100ms @ease_in_sine 200ms);
        }
    }

    &.compact-add-active
    {
        // Post-animation state.
        a.prev,
        a.next
        {
            opacity: 1;
        }
    }

    // Media Queries

    .respond-until-including(@2_column_width + 300px,
    {
        .position(absolute);

        z-index: 100;

        &.compact
        {
            .position(fixed);
        }
    });

    .respond-until-including(@1_column_width,
    {
        @factor: .5;

        .height(@factor);

        .edge-padding( @spacing_unit_root / 2 );

        .condensed-buttons();
    });

    .respond-between(@1_column_width, @2_column_width + 300px,
    {
        @factor: .75;

        .height(@factor);
    });

    .respond-between(@1_column_width, @entry_image_width,
    {
        .edge-padding( @spacing_unit_root / 2 );

        .condensed-buttons();
    });

    .respond-between(@entry_image_width, @entry_image_width + 100px,
    {
        .edge-padding(@spacing_unit_root);

        .intermediate-buttons();

        span.text-label
        {
            font-size: 1.100em; // 17px
        }
    });

    .respond-between(@entry_image_width + 100px, @2_column_width + 300px,
    {
        .fixed-width(727px);

        .intermediate-buttons();

        span.text-label
        {
            font-size: 1.100em; // 17px
        }
    });

    .respond-after(@2_column_width + 300px,
    {
        @contained: false;

        .position(fixed, @contained);

        .full-height-buttons();
    });

    // Local Mixins

    .position(@position: fixed, @contained: true) when (@contained = true)
    {
        // Important when this element serves as a container.
        position: @position;
            top: 0;
            //left: 0;

        a.prev,
        a.next
        {
            // If absolute, buttons will be contained within parent.
            // If fixed, buttons will be relative to window and ignore container.
            position: absolute;
                top: 0;
        }
    }

    // This default syntax is really confusing, but it makes this like an "else"
    // block.
    .position(@position: fixed, @contained: true) when (default())
    {
        position: @position;
            top: 0;

        a.prev,
        a.next
        {
            position: fixed;
                top: 0;
        }
    }

    .height(@factor: 1)
    {
        span.text-label
        {
            display: block;
            height: @header_height * @factor;
            line-height: @header_height * @factor;
        }

        a.prev,
        a.next
        {
            height: @header_height * @factor;
            margin-top: 0;

            svg
            {
                height: @header_height * @factor;
                width: 0.875em; // 14px;
            }
        }
    }

    .fixed-width(@width: 727px, @padding: 0)
    {
        .edge-padding(0);

        left: 50%;
        margin-left: -1 * (@width / 2);
        width: @width;

        a.prev,
        a.next
        {
            //position: absolute;
        }
    }

    .edge-padding(@padding: 0)
    {
        a.prev
        {
            padding-left: @padding;

            &:hover
            {
                padding-left: @padding;
                padding-right: 0;
            }
        }

        a.next
        {
            padding-right: @padding;

            &:hover
            {
                padding-right: @padding;
                padding-left: 0;
            }
        }
    }

    .full-height-buttons()
    {
        a.prev,
        a.next
        {
            height: 100%;

            svg
            {
                height: 100%;
                width: 1.313em; // 21px
            }
        }

        a.prev
        {
            padding-left: @spacing_unit_root + @spacing_unit_root / 2;

            &:hover
            {
                padding-left: @spacing_unit_root;
                padding-right: @spacing_unit_root / 2;
            }

            svg
            {
                margin-right: @spacing_unit_root / 3;
            }
        }

        a.next
        {
            padding-right: @spacing_unit_root + @spacing_unit_root / 2;

            &:hover
            {
                padding-right: @spacing_unit_root;
                padding-left: @spacing_unit_root / 2;
            }

            svg
            {
                margin-left: @spacing_unit / 3;
            }
        }
    }

    .intermediate-buttons()
    {
        a.prev,
        a.next
        {
            svg
            {
                width: 0.750em; // 12px
            }
        }

        a.prev
        {
            svg
            {
                margin-right: @spacing_unit_root / 3;
            }
        }

        a.next
        {
            svg
            {
                margin-left: @spacing_unit / 3;
            }
        }
    }

    .condensed-buttons()
    {
        a.prev,
        a.next
        {
            svg
            {
                fill: currentColor;
                stroke: none;
                width: 9px;
            }
        }

        a.prev
        {
            svg
            {
                margin-right: @spacing_unit / 5;
            }
        }

        a.next
        {
            svg
            {
                margin-left: @spacing_unit / 5;
            }
        }

        &.compact
        {
            a.prev,
            a.next
            {
                svg
                {
                    width: 9px;
                }
            }
        }
    }

    // Animations

    .keyframes(spinOnce,
    {
        0%
        {
            .rotate(0);
        }

        100%
        {
            .rotate(90deg);
        }
    });

    .keyframes(spinOnceBack
    {
        0%
        {
            .rotate(0);
        }

        100%
        {
            .rotate(-90deg);
        }
    });
}
