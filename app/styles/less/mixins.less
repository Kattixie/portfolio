// Curves

.rounded(@top-left, @top-right, @bottom-right, @bottom-left)
{
    -webkit-border-radius: @top-left @top-right @bottom-right @bottom-left;
       -moz-border-radius: @top-left @top-right @bottom-right @bottom-left;
            border-radius: @top-left @top-right @bottom-right @bottom-left;
}

.rounded(@corner)
{
    .rounded(@corner, @corner, @corner, @corner);
}

// Sprites

.text-sprite(@width, @height, @image-path)
{
    background: no-repeat url('@{image-path}');
    display: block;
    height: @height / 2;
    overflow: hidden;
    width: @width;

    &:hover
    {
        background-position: 0 -1/2 * @height;
    }
}

.sprite(@width, @height, @image-path)
{
    background: no-repeat url('@{image-path}');
    display: block;
    height: @height / 2;
    overflow: hidden;
    text-indent: -9999px;
    width: @width;
}

// Shadows

.box-shadow(@arguments)
{
    -webkit-box-shadow: @arguments;
       -moz-box-shadow: @arguments;
            box-shadow: @arguments;
}

.inner-shadow(@vlength: 1px, @hlength: 1px, @blur: 1px, @spread: 0px, @r: 0, @g: 0, @b: 0, @a: 100%) when (isnumber(@r))
{
    -webkit-box-shadow: inset @vlength @hlength @blur @spread rgba(@r, @g, @b, @a);
       -moz-box-shadow: inset @vlength @hlength @blur @spread rgba(@r, @g, @b, @a);
            box-shadow: inset @vlength @hlength @blur @spread rgba(@r, @g, @b, @a);
}

.inner-shadow(@vlength: 1px, @hlength: 1px, @blur: 1px, @spread: 0px, @hex: #000) when (iscolor(@hex))
{
    -webkit-box-shadow: inset @vlength @hlength @blur @spread @hex;
       -moz-box-shadow: inset @vlength @hlength @blur @spread @hex;
            box-shadow: inset @vlength @hlength @blur @spread @hex;
}

.drop-shadow(@vlength: 1px, @hlength: 1px, @blur: 1px, @spread: 0px, @r: 0, @g: 0, @b: 0, @a: 100%) when (isnumber(@r))
{
    -webkit-box-shadow: @vlength @hlength @blur @spread rgba(@r, @g, @b, @a);
       -moz-box-shadow: @vlength @hlength @blur @spread rgba(@r, @g, @b, @a);
            box-shadow: @vlength @hlength @blur @spread rgba(@r, @g, @b, @a);
}

// Backgrounds

.cover()
{
    -webkit-background-size: cover;
       -moz-background-size: cover;
         -o-background-size: cover;
            background-size: cover;
}

.background-size(@width, @height: auto)
{
    -webkit-background-size: @arguments;
       -moz-background-size: @arguments;
         -o-background-size: @arguments;
            background-size: @arguments;
}

.background-size-doubled(@width1, @height1: auto, @width2, @height2: auto)
{
    -webkit-background-size: @width1 @height1, @width2 @height2;
       -moz-background-size: @width1 @height1, @width2 @height2;
         -o-background-size: @width1 @height1, @width2 @height2;
            background-size: @width1 @height1, @width2 @height2;
}

// Layout

// Borrowed from Chris Coyier: https://css-tricks.com/using-flexbox/
.flex()
{
    display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
    display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
    display: -ms-flexbox;      /* TWEENER - IE 10 */
    display: -webkit-flex;     /* NEW - Chrome */
    display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */
}

.flex-width(@flex_value, @fallback_width)
{
    -webkit-box-flex: @flex_value;      /* OLD - iOS 6-, Safari 3.1-6 */
       -moz-box-flex: @flex_value;      /* OLD - Firefox 19- */
               width: @fallback_width;  /* For old syntax, otherwise collapses. */
        -webkit-flex: @flex_value;      /* Chrome */
            -ms-flex: @flex_value;      /* IE 10 */
                flex: @flex_value;      /* NEW, Spec - Opera 12.1, Firefox 20+ */
}

// Animation

.transition(@arguments)
{
    -webkit-transition: @arguments;
       -moz-transition: @arguments;
        -ms-transition: @arguments;
         -o-transition: @arguments;
            transition: @arguments;
}

.transition-delay(@arguments)
{
    -webkit-transition-delay: @arguments;
       -moz-transition-delay: @arguments;
        -ms-transition-delay: @arguments;
         -o-transition-delay: @arguments;
            transition-delay: @arguments;
}

.animation(@arguments)
{
    -webkit-animation: @arguments;
       -moz-animation: @arguments;
         -o-animation: @arguments;
            animation: @arguments;
}

.keyframes(@identifier, @arguments)
{
    @-webkit-keyframes @identifier { @arguments(); }
       @-moz-keyframes @identifier { @arguments(); }
         @-o-keyframes @identifier { @arguments(); }
            @keyframes @identifier { @arguments(); }
}

// Transformation

.transform(@arguments)
{
    -webkit-transform: @arguments;
       -moz-transform: @arguments;
        -ms-transform: @arguments;
         -o-transform: @arguments;
            transform: @arguments;
}

.transform-origin(@x: center, @y: center)
{
    -webkit-transform-origin: @x @y;
       -moz-transform-origin: @x @y;
        -ms-transform-origin: @x @y;
         -o-transform-origin: @x @y;
}

.rotate(@degrees)
{
    .transform( rotate(@degrees) );
}

// Media Queries

.query-name(@name)
{
    // This kind of works for detecting the current query. It gets funny due to
    // how styles are overridden. All active queries can be viewed by inspecting
    // this element however. This will work best for simple queries that do not
    // overlap. At the very least it will always inform us of the top-most
    // query.
    body::after
    {
        content: @name;
        font-size: 0;
        height: 0;
        line-height: 0;
    }
}
